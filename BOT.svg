<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2000 1400">
    <!-- 样式定义 -->
    <defs>
        <filter id="dropShadow">
            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-opacity="0.15"/>
        </filter>
        <style>
            .folder { font-family: system-ui, sans-serif; font-size: 24px; }
            .file { font-family: system-ui, sans-serif; font-size: 20px; }
            .description { font-family: system-ui, sans-serif; font-size: 20px; fill: #64748b; }
            .title { font-family: system-ui, sans-serif; font-size: 36px; font-weight: bold; }
            .section-title { font-family: system-ui, sans-serif; font-size: 28px; font-weight: bold; }
        </style>
    </defs>

    <!-- 背景 -->
    <rect width="2000" height="1400" fill="#ffffff"/>
    
    <!-- 项目标题和说明 -->
    <g transform="translate(60, 60)">
        <text class="title" fill="#0f172a">Telegram Bot Project Structure</text>
        <text x="0" y="50" class="description">基于 Vercel 部署的 Telegram 机器人项目结构图</text>
    </g>

    <!-- 主要内容区域 -->
    <g transform="translate(60, 150)">
        <!-- API 目录 -->
        <g>
            <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
            <text x="30" y="35" class="folder">📁 api</text>
            <text x="300" y="35" class="description">核心API接口目录</text>
            
            <g transform="translate(40, 70)">
                <text x="0" y="30" class="file">📄 keyboards.js</text>
                <text x="300" y="30" class="description">机器人键盘布局配置</text>
                
                <text x="0" y="80" class="file">📄 bot.js</text>
                <text x="300" y="80" class="description">机器人核心功能实现</text>
                
                <text x="0" y="130" class="file">📄 database.js</text>
                <text x="300" y="130" class="description">数据库连接管理</text>
                
                <text x="0" y="180" class="file">📄 types.js</text>
                <text x="300" y="180" class="description">类型定义和常量</text>
                
                <text x="0" y="230" class="file">📄 webhook.js</text>
                <text x="300" y="230" class="description">Telegram webhook处理</text>
            </g>
        </g>

        <!-- Handlers 目录 -->
        <g transform="translate(0, 350)">
            <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
            <text x="30" y="35" class="folder">📁 handlers</text>
            <text x="300" y="35" class="description">消息和命令处理器</text>
            
            <g transform="translate(40, 70)">
                <text x="0" y="30" class="file">📄 commands.js</text>
                <text x="300" y="30" class="description">命令处理逻辑</text>
                
                <text x="0" y="80" class="file">📄 errors.js</text>
                <text x="300" y="80" class="description">错误处理机制</text>
                
                <text x="0" y="130" class="file">📄 messages.js</text>
                <text x="300" y="130" class="description">消息处理逻辑</text>
            </g>
        </g>

        <!-- 右侧区域：src 和 utils -->
        <g transform="translate(1000, 0)">
            <!-- SRC 目录 -->
            <g>
                <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
                <text x="30" y="35" class="folder">📁 src</text>
                <text x="300" y="35" class="description">前端源代码</text>
                
                <g transform="translate(40, 70)">
                    <text x="0" y="30" class="file">📄 Dashboard.jsx</text>
                    <text x="300" y="30" class="description">主控制面板组件</text>
                    
                    <text x="0" y="80" class="file">📄 ErrorBoundary.jsx</text>
                    <text x="300" y="80" class="description">错误边界处理</text>
                    
                    <text x="0" y="130" class="file">📄 ErrorState.jsx</text>
                    <text x="300" y="130" class="description">错误状态展示</text>
                    
                    <text x="0" y="180" class="file">📄 LoadingState.jsx</text>
                    <text x="300" y="180" class="description">加载状态组件</text>
                </g>
            </g>

            <!-- Utils 目录 -->
            <g transform="translate(0, 350)">
                <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
                <text x="30" y="35" class="folder">📁 utils</text>
                <text x="300" y="35" class="description">工具函数</text>
                
                <g transform="translate(40, 70)">
                    <text x="0" y="30" class="file">📄 timeZone.js</text>
                    <text x="300" y="30" class="description">时区处理工具</text>
                    
                    <text x="0" y="80" class="file">📄 validation.js</text>
                    <text x="300" y="80" class="description">数据验证工具</text>
                </g>
            </g>
        </g>

        <!-- Services 目录 -->
        <g transform="translate(0, 650)">
            <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
            <text x="30" y="35" class="folder">📁 services</text>
            <text x="300" y="35" class="description">核心服务实现</text>
            
            <g transform="translate(40, 70)">
                <text x="0" y="30" class="file">📄 logger.js</text>
                <text x="300" y="30" class="description">日志服务</text>
                
                <text x="0" y="80" class="file">📄 monitoring.js</text>
                <text x="300" y="80" class="description">监控服务</text>
                
                <text x="0" y="130" class="file">📄 statistics.js</text>
                <text x="300" y="130" class="description">统计服务</text>
            </g>
        </g>

        <!-- 根目录配置文件 -->
        <g transform="translate(1000, 650)">
            <rect x="0" y="0" width="800" height="50" rx="8" fill="#e2e8f0" filter="url(#dropShadow)"/>
            <text x="30" y="35" class="folder">📁 根目录配置文件</text>
            
            <g transform="translate(40, 70)">
                <text x="0" y="30" class="file">📄 package.json</text>
                <text x="300" y="30" class="description">项目依赖配置</text>
                
                <text x="0" y="80" class="file">📄 vercel.json</text>
                <text x="300" y="80" class="description">Vercel部署配置</text>
                
                <text x="0" y="130" class="file">📄 webpack.config.js</text>
                <text x="300" y="130" class="description">Webpack构建配置</text>
                
                <text x="0" y="180" class="file">📄 README.md</text>
                <text x="300" y="180" class="description">项目说明文档</text>
                
                <text x="0" y="230" class="file">📄 .babelrc</text>
                <text x="300" y="230" class="description">Babel配置</text>
                
                <text x="0" y="280" class="file">📄 .gitignore</text>
                <text x="300" y="280" class="description">Git忽略配置</text>
            </g>
        </g>

        <!-- 技术栈说明 -->
        <g transform="translate(300, 950)">
            <rect x="0" y="0" width="1200" height="300" rx="8" fill="#f8fafc" stroke="#e2e8f0" stroke-width="2"/>
            <text x="40" y="50" class="section-title" fill="#0f172a">技术栈说明</text>
            
            <!-- 前端技术 -->
            <g transform="translate(40, 80)">
                <text x="0" y="30" class="section-title" fill="#3b82f6">前端技术</text>
                <text x="40" y="70" class="file">• React 18 - 用户界面开发</text>
                <text x="40" y="110" class="file">• Recharts - 数据可视化图表</text>
                <text x="40" y="150" class="file">• Lucide React - 图标组件库</text>
                <text x="40" y="190" class="file">• Webpack 5 - 项目构建工具</text>
            </g>
            
            <!-- 后端技术 -->
            <g transform="translate(600, 80)">
                <text x="0" y="30" class="section-title" fill="#3b82f6">后端技术</text>
                <text x="40" y="70" class="file">• Vercel Serverless - 云函数部署</text>
                <text x="40" y="110" class="file">• MongoDB - 数据存储</text>
                <text x="40" y="150" class="file">• Telegraf.js - Telegram Bot 开发框架</text>
                <text x="40" y="190" class="file">• Node.js - 运行环境</text>
            </g>
        </g>
    </g>
</svg>